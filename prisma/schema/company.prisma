enum CompanyRole {
    ADMIN
    MEMBER
}

model Company {
    id               String               @id @default(cuid())
    logoUrl          String?
    name             String
    description      String?
    website          String?
    adminEmployerId  String // ID of the employer who created this company
    adminEmployer    Employer             @relation("AdminEmployer", fields: [adminEmployerId], references: [id], onDelete: Cascade)
    members          CompanyMember[] // Relationship through the join table
    invitations      Invitations[]
    isDeleted        Boolean              @default(false)
    createdAt        DateTime             @default(now())
    updatedAt        DateTime             @updatedAt
    deletedAt        DateTime?
    jobPosted        Job[]
    slackAccessToken String?
    slackChannelId   String?
    subscriptions    CompanySubscription?
    stripeCustomerId String?
    LinkedInToken    LinkedInToken?

    @@map("companies")
}

model LinkedInToken {
    id          String   @id @default(cuid())
    companyId   String   @unique
    company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    accessToken String
    createdAt   DateTime @default(now())
    expiresAt   DateTime

    @@map("linked_in_tokens")
}

model CompanyMember {
    id         String      @id @default(cuid())
    employerId String
    companyId  String
    role       CompanyRole @default(MEMBER)
    joinedAt   DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    deletedAt  DateTime?
    isDeleted  Boolean     @default(false)
    employer   Employer    @relation(fields: [employerId], references: [id], onDelete: Cascade)
    company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

    @@unique([employerId, companyId])
    @@map("company_members")
}
