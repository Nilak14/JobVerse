generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userType      UserType?    @default(JOB_SEEKER)
  address       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  COMPANY       COMPANY[]
  JOB_SEEKER    JOB_SEEKER[]

  @@map("users")
}

enum UserType {
  ADMIN
  JOB_SEEKER
  COMPANY
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model COMPANY {
  id                 String  @id @default(cuid())
  companyDescription String?
  companyWebsite     String?
  userId             String
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("companies")
}

model JOB_SEEKER {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_seekers")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@unique([identifier, token])
  @@map("verification_tokens")
}
