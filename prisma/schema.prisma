generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  JOB_SEEKER
  EMPLOYER
}

enum CompanyRole {
  ADMIN
  MEMBER
}

enum JobStatus {
  ACCEPTED
  REJECTED
  PENDING
  INDRAFT
}

enum SalaryType {
  RANGE
  STARTING
  MAXIMUM
  EXACT
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  userType      UserType?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  EMPLOYER      Employer?
  JOB_SEEKER    JOB_SEEKER?
  isBlocked     Boolean     @default(false)

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@index([email])
  @@map("email_verification_tokens")
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@index([email])
  @@map("reset_password_tokens")
}

model JOB_SEEKER {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_seekers")
}

model Employer {
  id                  String          @id @default(cuid())
  userId              String          @unique
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyMemberships  CompanyMember[] // Relationship through the join table
  sentInvitations     Invitations[]   @relation("InviterToInvitations")
  receivedInvitations Invitations[]   @relation("InviteeToInvitations")
  adminCompanies      Company[]       @relation("AdminEmployer")
  activeCompanyId     String? // ID of the company the employer is currently active in
  createdJobs         Job[]

  @@map("employers")
}

model Company {
  id              String          @id @default(cuid())
  logoUrl         String?
  name            String
  description     String?
  website         String?
  adminEmployerId String // ID of the employer who created this company
  adminEmployer   Employer        @relation("AdminEmployer", fields: [adminEmployerId], references: [id], onDelete: Cascade)
  members         CompanyMember[] // Relationship through the join table
  invitations     Invitations[]
  isDeleted       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  jobPosted       Job[]

  @@map("companies")
}

model CompanyMember {
  id         String      @id @default(cuid())
  employerId String
  companyId  String
  role       CompanyRole @default(MEMBER)
  joinedAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?
  isDeleted  Boolean     @default(false)
  employer   Employer    @relation(fields: [employerId], references: [id], onDelete: Cascade)
  company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([employerId, companyId])
  @@map("company_members")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Invitations {
  id        String           @id @default(cuid())
  inviterId String // The employer who is sending the invitation
  inviteeId String // The employer being invited
  companyId String // The company for which the invitation is being sent
  status    InvitationStatus @default(PENDING) // Status of the invitation (PENDING, ACCEPTED, REJECTED)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  inviter Employer @relation("InviterToInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee Employer @relation("InviteeToInvitations", fields: [inviteeId], references: [id], onDelete: Cascade)
  company Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

// Job Post
model Job {
  id          String    @id @default(cuid())
  title       String
  description String
  location    String
  companyId   String
  status      JobStatus @default(INDRAFT)
  company     Company   @relation(fields: [companyId], references: [id])
  createdBy   String
  creator     Employer  @relation(fields: [createdBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean   @default(false)
  Salary      Salary[]
}

model Salary {
  id          String     @id @default(cuid())
  type        SalaryType
  minSalary   Float?
  maxSalary   Float?
  exactSalary Float?
  currency    String
  rate        Rate
  job         Job        @relation(fields: [jobId], references: [id])
  jobId       String
}

enum Rate {
  PER_HOUR
  PER_DAY
  PER_WEEK
  PER_MONTH
  PER_YEAR
}
