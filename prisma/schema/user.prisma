enum UserType {
    ADMIN
    JOB_SEEKER
    EMPLOYER
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String                 @unique
    emailVerified         DateTime?
    image                 String?
    password              String?
    accounts              Account[]
    userType              UserType?
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    EMPLOYER              Employer?
    JOB_SEEKER            JOB_SEEKER?
    isBlocked             Boolean                @default(false)
    Admin                 Admin?
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?
    subscriptions         UserSubscription?
    stripeCustomerId      String?

    @@map("users")
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
    @@map("accounts")
}

model JOB_SEEKER {
    id               String               @id @default(cuid())
    userId           String               @unique
    user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    savedJobs        SavedJob[]
    createdResumes   Resume[]
    JobSeekerProfile JobSeekerProfile?
    uploadedResumes  UserUploadedResume[]
    applications     Application[]

    @@map("job_seekers")
}

model Employer {
    id                  String              @id @default(cuid())
    userId              String              @unique
    user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    companyMemberships  CompanyMember[]
    sentInvitations     Invitations[]       @relation("InviterToInvitations")
    receivedInvitations Invitations[]       @relation("InviteeToInvitations")
    adminCompanies      Company[]           @relation("AdminEmployer")
    activeCompanyId     String?
    createdJobs         Job[]
    ApplicationReview   ApplicationReview[]

    @@map("employers")
}

model Admin {
    id        String      @id @default(cuid())
    userId    String      @unique
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    JobReview JobReview[]

    @@map("admins")
}

model JobSeekerProfile {
    id                            String                    @id @default(cuid())
    userId                        String                    @unique
    user                          JOB_SEEKER                @relation(fields: [userId], references: [id], onDelete: Cascade)
    location                      String?
    designation                   String?
    profileVisibility             Boolean                   @default(true)
    openToWork                    Boolean                   @default(true)
    bio                           String?
    skills                        String[]
    receiveJobRecommendationEmail Boolean                   @default(true)
    receiveJobApplicationUpdated  Boolean                   @default(true)
    receiveMarketingEmails        Boolean                   @default(true)
    WorkExperience                JobSeekerWorkExperience[]
    createdAt                     DateTime                  @default(now())
    updatedAt                     DateTime                  @updatedAt
    Education                     JobSeekerEducation[]
    Certification                 JobSeekerCertification[]

    @@map("job_seeker_profiles")
}

model JobSeekerWorkExperience {
    id                 String           @id @default(cuid())
    jobSeekerProfileId String
    order              Int
    jobSeekerProfile   JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
    position           String
    companyName        String
    description        String
    startDate          DateTime
    endDate            DateTime?
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt

    @@unique([jobSeekerProfileId, order])
    @@map("job_seeker_work_experiences")
}

model JobSeekerEducation {
    id                 String           @id @default(cuid())
    jobSeekerProfileId String
    jobSeekerProfile   JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
    degreeTitle        String
    instituteName      String
    order              Int
    instituteLocation  String
    startDate          DateTime
    endDate            DateTime?
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt

    @@unique([jobSeekerProfileId, order])
    @@map("job_seeker_educations")
}

model JobSeekerCertification {
    id                 String           @id @default(cuid())
    jobSeekerProfileId String
    jobSeekerProfile   JobSeekerProfile @relation(fields: [jobSeekerProfileId], references: [id], onDelete: Cascade)
    title              String
    instituteName      String
    completionDate     DateTime
    order              Int
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt

    @@unique([jobSeekerProfileId, order])
    @@map("job_seeker_certifications")
}

model UserSubscription {
    id                      String   @id @default(cuid())
    userId                  String   @unique
    user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    stripeCustomerId        String   @unique
    stripeSubscriptionId    String   @unique
    stripePriceId           String
    stripeCurrentPeriodEnd  DateTime
    stripeCancelAtPeriodEnd Boolean  @default(false)
    createdAt               DateTime @default(now())
    updatedAt               DateTime @updatedAt

    @@map("user_subscriptions")
}
