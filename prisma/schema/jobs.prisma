enum JobStatus {
    DRAFT
    PENDING
    ACTIVE
    REJECTED
    NEED_REVIEW
    PAUSED
    EXPIRED
    DELETED
}

enum JobReviewStatus {
    APPROVED
    REJECTED
    NEED_REVIEW
}

model Job {
    id                    String       @id @default(cuid())
    title                 String?
    jobType               String?
    workMode              String?
    location              String?
    categoryId            String?
    category              JobCategory? @relation(fields: [categoryId], references: [id])
    subcategoryId         String?
    subcategory           SubCategory? @relation(fields: [subcategoryId], references: [id])
    experienceLevel       String?
    totalHeads            String?
    Salary                Salary?
    benefits              String[]
    description           String?
    tags                  String[]
    skills                String[]
    minEducationRequired  String?
    preferredGender       String?
    licenseRequired       String?
    vehicleRequired       String?
    resumeRequired        Boolean      @default(false)
    isUrgent              Boolean      @default(false)
    isFeatured            Boolean      @default(false)
    deadline              DateTime?
    sendEmailNotification Boolean      @default(false)
    latitude              String?
    longitude             String?
    status                JobStatus    @default(DRAFT)
    companyId             String
    company               Company      @relation(fields: [companyId], references: [id])
    createdBy             String
    creator               Employer     @relation(fields: [createdBy], references: [id])
    createdAt             DateTime     @default(now())
    updatedAt             DateTime     @updatedAt
    deletedAt             DateTime?
    isDeleted             Boolean      @default(false)
    review                JobReview?

    @@map("jobs")
}

model Salary {
    id        String  @id @default(cuid())
    type      String?
    minAmount Float?
    maxAmount Float?
    amount    Float?
    currency  String?
    rate      String?
    job       Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
    jobId     String  @unique

    @@map("salaries")
}

model JobReview {
    id              String           @id @default(cuid())
    jobId           String           @unique
    job             Job              @relation(fields: [jobId], references: [id])
    reviewedStatus  JobReviewStatus?
    reviewedBy      String?
    reviewer        Admin?           @relation(fields: [reviewedBy], references: [id])
    reviewedAt      DateTime?
    reviewedComment String?
}
